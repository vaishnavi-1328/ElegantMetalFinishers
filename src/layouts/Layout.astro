---
export interface Props {
  title: string;
  description?: string;
  keywords?: string;
  canonical?: string;
  ogTitle?: string;
  ogDescription?: string;
  ogImage?: string;
}

const { 
  title, 
  description = "Elegant Metal Finishers - Premier laser cutting, sheet metal fabrication, and custom metal designs. Industrial metal services with precision and quality.",
  keywords = "laser cutting, sheet metal fabrication, metal bending, custom metal designs, industrial metal services, precision cutting, metal fabrication, steel cutting, aluminum cutting, CNC cutting",
  canonical,
  ogTitle,
  ogDescription,
  ogImage = "/og-image.jpg"
} = Astro.props;

const fullTitle = title === 'Home' ? 'Elegant Metal Finishers - Premium Laser Cutting & Metal Fabrication Services' : `${title} - Elegant Metal Finishers`;
const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <title>{fullTitle}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content={ogTitle || fullTitle} />
    <meta property="og:description" content={ogDescription || description} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="Elegant Metal Finishers" />
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={ogTitle || fullTitle} />
    <meta name="twitter:description" content={ogDescription || description} />
    <meta name="twitter:image" content={ogImage} />
    
    <!-- Structured Data -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "Organization",
        "name": "Elegant Metal Finishers",
        "description": "Premier laser cutting, sheet metal fabrication, and custom metal designs",
        "url": "https://elegantmetalfinishers.com",
        "logo": "https://elegantmetalfinishers.com/logo.png",
        "contactPoint": {
          "@type": "ContactPoint",
          "telephone": "+91-9876543210",
          "contactType": "customer service"
        },
        "address": {
          "@type": "PostalAddress",
          "streetAddress": "Industrial Area, Sector 45",
          "addressLocality": "Gurgaon",
          "addressRegion": "Haryana",
          "postalCode": "122003",
          "addressCountry": "IN"
        },
        "services": ["Laser Cutting", "Sheet Metal Fabrication", "Metal Bending", "Custom Metal Designs", "Industrial Metal Services"]
      }
    </script>
    
    <!-- Custom Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
    
    <!-- Custom Font Styles -->
    <style>
      @font-face {
        font-family: 'Suissnord';
        src: url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap');
        font-display: swap;
      }
      
      @font-face {
        font-family: 'Lugio Sans';
        src: url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600&display=swap');
        font-display: swap;
      }
      
      .font-suissnord {
        font-family: 'Orbitron', 'Suissnord', monospace;
        font-weight: 900;
        letter-spacing: -0.02em;
      }
      
      .font-lugio {
        font-family: 'Nunito Sans', 'Lugio Sans', sans-serif;
        font-weight: 400;
      }
    </style>
    
    <!-- Performance Optimization -->
    <meta name="robots" content="index, follow" />
    <meta name="googlebot" content="index, follow" />
  </head>
  <body class="bg-white text-slate-900 antialiased">
    <slot />
    
    <!-- Cookie Consent -->
    <div id="cookie-consent" class="fixed bottom-4 left-4 right-4 bg-slate-800 text-white p-4 rounded-lg shadow-lg z-50 hidden">
      <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
        <p class="text-sm">We use cookies to enhance your experience. By continuing to visit this site you agree to our use of cookies.</p>
        <div class="flex gap-2">
          <button id="accept-cookies" class="bg-olive-600 hover:bg-olive-700 px-4 py-2 rounded text-sm font-medium transition-colors">Accept</button>
          <button id="decline-cookies" class="bg-slate-600 hover:bg-slate-700 px-4 py-2 rounded text-sm font-medium transition-colors">Decline</button>
        </div>
      </div>
    </div>
    
    <script>
      // Cookie consent functionality
      const cookieConsent = document.getElementById('cookie-consent');
      const acceptBtn = document.getElementById('accept-cookies');
      const declineBtn = document.getElementById('decline-cookies');
      
      if (!localStorage.getItem('cookieConsent')) {
        cookieConsent.classList.remove('hidden');
      }
      
      acceptBtn.addEventListener('click', () => {
        localStorage.setItem('cookieConsent', 'accepted');
        cookieConsent.classList.add('hidden');
      });
      
      declineBtn.addEventListener('click', () => {
        localStorage.setItem('cookieConsent', 'declined');
        cookieConsent.classList.add('hidden');
      });
      
      // Smooth scrolling for anchor links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
      
      // Intersection Observer for animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-slide-up');
          }
        });
      }, observerOptions);
      
      document.querySelectorAll('.animate-on-scroll').forEach(el => {
        observer.observe(el);
      });
      
      // Counter animation
      const counters = document.querySelectorAll('.counter');
      const counterObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const counter = entry.target;
            const target = parseInt(counter.getAttribute('data-target'));
            const duration = 2000;
            const increment = target / (duration / 16);
            let current = 0;
            
            const updateCounter = () => {
              current += increment;
              if (current < target) {
                counter.textContent = Math.ceil(current);
                requestAnimationFrame(updateCounter);
              } else {
                counter.textContent = target;
              }
            };
            
            updateCounter();
            counterObserver.unobserve(counter);
          }
        });
      }, observerOptions);
      
      counters.forEach(counter => {
        counterObserver.observe(counter);
      });
    </script>
  </body>
</html>